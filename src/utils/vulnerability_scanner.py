import streamlit as st
import subprocess
import os
import pandas as pd
from ipaddress import ip_address, ip_network

st.set_page_config(page_title="Vulnerability Scanner", layout="wide")


def validate_ip_range(ip_range):
    """
    Validate an IP or IP range (e.g., 192.168.0.1 or 192.168.0.1-100).
    Returns a tuple (is_valid, error_message).
    """
    try:
        if '-' in ip_range:
            base_ip, range_part = ip_range.rsplit('.', 1)
            start_num, end_num = map(int, range_part.split('-'))
            if not (0 <= start_num <= end_num <= 255):
                return False, "IP range must be between 0 and 255 (e.g., 192.168.0.1-100)."
            start_ip = f"{base_ip}.{start_num}"
            end_ip = f"{base_ip}.{end_num}"
            ip_address(start_ip)  # Validate start IP
            ip_address(end_ip)  # Validate end IP
            return True, None
        else:
            ip_address(ip_range)  # Validate single IP
            return True, None
    except ValueError as e:
        return False, f"Invalid IP or range: {str(e)}"


def validate_port_range(port_range):
    """
    Validate a port range (e.g., 1-5000).
    Returns a tuple (is_valid, error_message).
    """
    try:
        start_port, end_port = map(int, port_range.split('-'))
        if not (1 <= start_port <= end_port <= 65535):
            raise ValueError("Ports must be between 1 and 65535, and start must be <= end.")
        return True, None
    except ValueError as e:
        return False, f"Invalid port range: {str(e)}. Use format 'start-end' (e.g., 1-5000)."


def run_nmap_scan(target, port_range='1-5000', scan_type='SYN Stealth (-sS)'):
    """
    Run an Nmap scan with real-time progress feedback, input validation, and result visualization.
    """
    # Validate inputs
    ip_valid, ip_error = validate_ip_range(target)
    if not ip_valid:
        return [(ip_error, [])]

    port_valid, port_error = validate_port_range(port_range)
    if not port_valid:
        return [(port_error, [])]

    # Map scan type to Nmap arguments
    scan_args = {
        'SYN Stealth (-sS)': '-sS',
        'Version Detection (-sV)': '-sV',
        'TCP Connect (-sT)': '-sT'
    }
    scan_arg = scan_args.get(scan_type, '-sS')

    try:
        # Specify the path to nmap.exe
        nmap_path = "C:\\Program Files (x86)\\Nmap\\nmap.exe"
        if not os.path.exists(nmap_path):
            return [(f"Error: Nmap executable not found at {nmap_path}", [])]

        # Test Nmap version
        try:
            version_result = subprocess.run([nmap_path, "-V"], capture_output=True, text=True, check=True,
                                            env=os.environ.copy())
            st.write(f"Nmap version check: {version_result.stdout}")
            if version_result.stderr:
                st.write(f"Nmap version check error: {version_result.stderr}")
        except subprocess.CalledProcessError as e:
            st.write(f"Error running Nmap version check: {e.stderr}")
            return [(f"Error: Failed to verify Nmap installation - {e.stderr}", [])]

        # Run Nmap scan with real-time output
        scan_command = f'"{nmap_path}" -v {scan_arg} --open -p {port_range} {target}'
        st.write(f"Executing Nmap command: {scan_command}")
        env = os.environ.copy()
        env["PATH"] = f"{os.path.dirname(nmap_path)};{env.get('PATH', '')}"

        # Use subprocess.Popen to stream output
        process = subprocess.Popen(
            scan_command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            env=env
        )

        # Display progress in real-time using st.empty and st.text
        st.write("Scan Progress:")
        progress_container = st.empty()
        full_output = []
        while True:
            line = process.stdout.readline()
            if not line and process.poll() is not None:
                break
            if line:
                full_output.append(line.strip())
                # Update the progress container with the last 20 lines
                progress_container.text("\n".join(full_output[-20:]))
        stderr = process.stderr.read()
        process.wait(timeout=120)

        if process.returncode != 0:
            return [(f"Error: Nmap scan failed with exit code {process.returncode}. stderr: {stderr}", [])]

        st.write("Raw Nmap output:")
        st.text("\n".join(full_output))
        if stderr:
            st.write("Nmap error output:")
            st.text(stderr)

        # Parse the output to extract all hosts and their ports
        results = []
        lines = full_output
        current_host = None
        ports_info = []
        parsing_ports = False
        scanned_hosts = set()
        for line in lines:
            if line.startswith("Nmap scan report for"):
                if current_host:
                    results.append((current_host, ports_info))
                current_host = line.replace("Nmap scan report for", "").strip()
                scanned_hosts.add(current_host)
                ports_info = []
                parsing_ports = False
            elif line.startswith("PORT") and "STATE" in line and "SERVICE" in line:
                parsing_ports = True  # Start parsing port table
            elif parsing_ports and "/" in line and any(state in line for state in ["open", "closed", "filtered"]):
                parts = line.split()
                if len(parts) >= 3:  # Ensure there are enough parts (port, state, service)
                    port = parts[0].split("/")[0]
                    state = parts[1]
                    service = parts[2]
                    ports_info.append({'port': port, 'service': service, 'state': state})
            elif parsing_ports and not line.strip():  # Empty line after port table
                parsing_ports = False
        if current_host:
            results.append((current_host, ports_info))

        # Add hosts that were scanned but not reported in the final output (e.g., no open ports)
        # Extract all hosts mentioned as scanned
        all_hosts = set()
        for line in lines:
            if "Completed SYN Stealth Scan against" in line:
                ip = line.split("against ")[1].split(" in")[0]
                all_hosts.add(ip)
        # Add missing hosts to results
        for host in all_hosts:
            if not any(host in r[0] for r in results):
                results.append((host, []))

        # Display results in a table if ports are found
        if results:
            st.subheader("Scan Results")
            for host_info, ports in results:
                st.write(host_info)
                if ports:
                    df = pd.DataFrame(ports, columns=['port', 'service', 'state'])
                    st.table(df)
                else:
                    st.write("  No open ports detected.")
        return results if results else [(f"Warning: No hosts up or no open ports detected on {target}", [])]
    except subprocess.TimeoutExpired:
        return [(f"Error: Nmap scan timed out after 120 seconds for {target}", [])]
    except subprocess.CalledProcessError as e:
        return [(f"Error during scan: {e.stderr}", [])]
    except Exception as e:
        return [(f"Error during scan: {str(e)}", [])]


def main():
    st.title("üõ°Ô∏è Vulnerability Scanner")
    st.write("Enter an IP or IP range to scan for vulnerabilities using Nmap.")

    # Use session state to persist the target IP input
    if 'target_ip' not in st.session_state:
        st.session_state.target_ip = "192.168.0.18"

    target_ip = st.text_input(
        "Target IP or Range (e.g., 192.168.0.1 or 192.168.0.1-100)",
        value=st.session_state.target_ip,
        key="target_ip_input"
    )
    # Update session state with the new input
    st.session_state.target_ip = target_ip

    port_range = st.text_input("Port Range (e.g., 1-5000)", value="1-5000")
    scan_type = st.selectbox("Scan Type", ["SYN Stealth (-sS)", "Version Detection (-sV)", "TCP Connect (-sT)"])

    if st.button("Run Scan"):
        results = run_nmap_scan(st.session_state.target_ip, port_range, scan_type)
        if not any("Error" in host_info for host_info, _ in results):
            for host_info, ports_info in results:
                if "Warning" in host_info or "Error" in host_info:
                    st.write(host_info)


if __name__ == "__main__":
    main()